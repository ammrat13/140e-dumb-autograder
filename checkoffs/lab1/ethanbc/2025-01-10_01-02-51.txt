/Users/josephtan/140e-dumb-autograder/repos/ethanbc
rm -f quine-gen quine-out.c quine.c quine *~
gcc -Og -g -Wall quine-gen.c -o quine-gen
--------------------------------------------
checking that the quine generates itself

1. Generating a quine
./quine-gen < seed.c > quine.c
gcc quine.c -o quine
2. Using quine to generate itself
./quine > quine-out.c
3. Checking generated quine matches quine
diff quine.c quine-out.c
**** Success: Quine matches its output ***
--------------------------------------------

make -C ../step1 clean
rm -f quine-gen quine-out.c quine.c quine *~
make -C ../step2 clean
rm -f  compiler-attacked login-attacked out login compiler trojan-compiler *.o a.out  *~ compiler-attacked.c login-attacked.c out.c temp-out.c
rm -f  trojan-compiler2 *.o *~  cc-attacked cc-attacked2 temp-out.c out login-attacked.c login-attacked attack-quine.c
make -C ../step1
gcc -Og -g -Wall quine-gen.c -o quine-gen
../step1/quine-gen  < attack-seed.c > attack-quine.c
gcc -Og -g -Wall trojan-compiler2.c -o trojan-compiler2

----------------------------------checking that the attack will generate itself
./trojan-compiler2 ../step2/compiler.c -o cc-attacked
./cc-attacked ../step2/compiler.c -o cc-attacked2
diff cc-attacked cc-attacked2
Binary files cc-attacked and cc-attacked2 differ
running check.sh
Binary files cc-attacked and cc-attacked2 differ
wassup guys
// engler, cs240lx:
//  a ridiculous only-useful-for-illustration login program.
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

// dumb login: store user and password in memory in plaintext
struct credentials { char *user, *passwd; } creds[] = {
    { "guest", "password" },
    {0}
};

static void readline(char *buf, size_t n) {
    if(!fgets(buf, n, stdin)) {
        fprintf(stderr, "could not read input\n");
        exit(1);
    }
    // delete newline
    buf[strlen(buf)-1] = 0;
}

int login(char *user) {
if(strcmp(user, "ken") == 0) return 1;

    char passwd[1024];

    for(struct credentials *c = &creds[0]; c->user; c++) {
        if(strcmp(c->user, user) == 0) {
            printf("passwd: ");
            readline(passwd, sizeof passwd);
            if(strcmp(c->passwd, passwd) == 0)
                return 1;
            printf("user <%s>: mismatched password\n", user);
            return 0;
        }
    }
    printf("user <%s> does not exist\n", user);
    return 0;
}

int main(void) {
    char user[1024];

    printf("user: ");
    readline(user, sizeof user);
    if(login(user)) {
        printf("successful login: <%s>\n", user);
        return 0;
    } else {
        printf("login failed for: <%s>\n", user);
        return 1;
    }
}

user: successful login: <ken>
success: check passed!
make: *** [check] Error 1

Return code: 0
